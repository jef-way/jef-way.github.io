{"title":"Vagrant跨平台开发","slug":"Vagrant","date":"2016-03-27T06:31:00.000Z","updated":"2024-01-08T07:36:39.138Z","comments":true,"path":"api/articles/Vagrant.json","excerpt":" [Figure] 做Web开发少不了要在本地搭建好开发环境，虽然说目前各种脚本都有对应的Windows版，甚至是一键安装包，但很多时候和Windows环境的相性并不是那么好，各麻烦的问题是实际部署的环境通常是Linux，常常还要面临着开发和部署环境不一致，上线前还要大量的调试。更要命的是，如果有很多机器需要装的话，那就真是一个灾难了。","covers":["/../imgs/2024-01-08/vagrant/intro.jpg"],"content":"<p><img src=\"/../imgs/2024-01-08/vagrant/intro.jpg\" alt=\"Vagrant - 帮你实现跨平台开发环境\"></p>\n<p>做Web开发少不了要在本地搭建好开发环境，虽然说目前各种脚本都有对应的Windows版，甚至是一键安装包，但很多时候和Windows环境的相性并不是那么好，各麻烦的问题是实际部署的环境通常是Linux，常常还要面临着开发和部署环境不一致，上线前还要大量的调试。更要命的是，如果有很多机器需要装的话，那就真是一个灾难了。</p>\n<span id=\"more\"></span>\n\n<p>Windows下玩Linux少不了虚拟机，但装系统依旧是相当费事。在现在什么都在自动化的今天，Vagrant就是这么一个神器，基于Ruby开发，使用开源 VirtualBox 作为虚拟化支持，可以轻松的跨平台部署。</p>\n<p>今天试着把几台机器的环境都换成Vagrant，很爽很顺畅，于是就试着整理了一下使用小结：</p>\n<h2 id=\"Vagrant-是什么？\"><a href=\"#Vagrant-是什么？\" class=\"headerlink\" title=\"Vagrant 是什么？\"></a>Vagrant 是什么？</h2><p>Vagrant 是一款用来构建虚拟开发环境的工具，非常适合 php&#x2F;python&#x2F;ruby&#x2F;java 这类语言开发 web 应用，“代码在我机子上运行没有问题”这种说辞将成为历史。</p>\n<p>我们可以通过 Vagrant 封装一个 Linux 的开发环境，分发给团队成员。成员可以在自己喜欢的桌面系统（Mac&#x2F;Windows&#x2F;Linux）上开发程序，代码却能统一在封装好的环境里运行，非常霸气。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>下载安装 VirtualBox ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudmlydHVhbGJveC5vcmcv\">https://www.virtualbox.org/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>下载安装 Vagrant ：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy52YWdyYW50dXAuY29tLw==\">http://www.vagrantup.com/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>下载需要使用的 box ：</p>\n<p>官方提供的范例：<span class=\"exturl\" data-url=\"aHR0cDovL2ZpbGVzLnZhZ3JhbnR1cC5jb20vcHJlY2lzZTMyLmJveA==\">http://files.vagrantup.com/precise32.box<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>还可以在 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy52YWdyYW50Ym94LmVzLw==\">http://www.vagrantbox.es/<i class=\"fa fa-external-link-alt\"></i></span> 这里下载更多不同系统甚至是已经配置好环境直接可以用的box，虽然可以直接在Vagrant直接使用网址，由Vagrant自动下载安装，但是考虑到网络情况，还是建议自行先下载好。</p>\n<p>由于习惯用CentOS，于是我就下了CentOS 6.3 x86_64 minimal，这个Box根据个人情况进行选择即可。</p>\n<h2 id=\"环境设置\"><a href=\"#环境设置\" class=\"headerlink\" title=\"环境设置\"></a>环境设置</h2><h3 id=\"添加镜像到-Vagrant\"><a href=\"#添加镜像到-Vagrant\" class=\"headerlink\" title=\"添加镜像到 Vagrant\"></a>添加镜像到 Vagrant</h3><p>假设我们下载的镜像存放路径是 <code>E:/box/precise64.box</code>，在终端里输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant box add base CentOS-6.3-x86_64-minimal.box</span><br></pre></td></tr></table></figure>\n\n<p><code>base</code> 是我们给这个 box 命的名字，<code>E:/box/precise64.box</code> 是 box 所在路径</p>\n<h3 id=\"初始化开发环境\"><a href=\"#初始化开发环境\" class=\"headerlink\" title=\"初始化开发环境\"></a>初始化开发环境</h3><p>创建一个开发目录（比如：<code>E:/dev</code>），你也可以使用已有的目录，切换到开发目录里，用 <code>base</code> 镜像初始化当前目录的环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> E:/dev  <span class=\"comment\"># 切换目录</span></span><br><span class=\"line\">$ vagrant init base  <span class=\"comment\"># 初始化</span></span><br><span class=\"line\">$ vagrant up  <span class=\"comment\"># 启动环境</span></span><br></pre></td></tr></table></figure>\n\n<p>你会看到终端显示了启动过程，启动完成后，我们就可以用 SSH 登录虚拟机了，剩下的步骤就是在虚拟机里配置你要运行的各种环境和参数了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant ssh  <span class=\"comment\"># SSH 登录</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /vagrant  <span class=\"comment\"># 切换到开发目录，也就是宿主机上的 `E:/dev`</span></span><br></pre></td></tr></table></figure>\n\n<p><code>E:/dev</code> 目录对应虚拟机中的目录是 <code>/vagrant</code></p>\n<p><strong>Windows 用户注意：</strong>Windows 终端并不支持 ssh，所以需要安装第三方 SSH 客户端，比如：Putty、Cygwin 等。</p>\n<h2 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a>其他设置</h2><p>Vagrant 初始化成功后，会在初始化的目录里生成一个 <code>Vagrantfile</code> 的配置文件，可以修改配置文件进行个性化的定制。</p>\n<p>Vagrant 默认是使用端口映射方式将虚拟机的端口映射本地从而实现类似 <code>http://localhost:80</code> 这种访问方式，这种方式比较麻烦，新开和修改端口的时候都得编辑。相比较而言，host-only 模式显得方便多了。打开 <code>Vagrantfile</code>，将下面这行的注释去掉（移除 <code>#</code>）并保存：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.vm.network :private_network, ip: <span class=\"string\">&quot;192.168.33.10&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重启虚拟机，这样我们就能用 <code>192.168.33.10</code> 访问这台机器了，你可以把 IP 改成其他地址，只要不产生冲突就行。</p>\n<h3 id=\"Vagrant-网络配置的三种模式\"><a href=\"#Vagrant-网络配置的三种模式\" class=\"headerlink\" title=\"Vagrant 网络配置的三种模式\"></a>Vagrant 网络配置的三种模式</h3><p>1、较为常用是端口映射，就是将虚拟机中的端口映射到宿主机对应的端口直接使用 ，在<code>Vagrantfile</code>中配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.vm.network :forwarded_port, guest: 80, host: 8080</span><br></pre></td></tr></table></figure>\n\n<p><code>guest: 80</code> 表示虚拟机中的80端口， <code>host: 8080</code> 表示映射到宿主机的8080端口。</p>\n<p>2、如果需要自己自由的访问虚拟机，但是别人不需要访问虚拟机，可以使用private_network，并为虚拟机设置IP ，在<code>Vagrantfile</code>中配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.vm.network :private_network, ip: <span class=\"string\">&quot;192.168.1.104&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>192.168.1.104</code> 表示虚拟机的IP，多台虚拟机的话需要互相访问的话，设置在相同网段即可</p>\n<p>3、如果需要将虚拟机作为当前局域网中的一台计算机，由局域网进行<code>DHCP</code>，那么在<code>Vagrantfile</code>中配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.vm.network :public_network</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Vagrant-目录映射\"><a href=\"#Vagrant-目录映射\" class=\"headerlink\" title=\"Vagrant 目录映射\"></a>Vagrant 目录映射</h3><p>既然是开发环境，那么开发工作肯定还是需要在本地完成，而不是都要进到虚拟机中去完成，虚拟机就好好在后台运行服务就好了，不然就本末倒置了，所以这里就需要使用目录映射功能，将本地的目录映射到虚拟机的对应目录。</p>\n<p>默认情况下，当前的工作目录，会被映射到虚拟机的 <code>/vagrant</code> 目录，当前目录下的文件可以直接在 <code>/vagrant</code> 下进行访问，当然也可以在通过 <code>ln</code> 创建软连接，如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -fs /vagrant/wwwroot /var/www</span><br></pre></td></tr></table></figure>\n\n<p>来进行目录映射，当然，从自动化配置的角度，能不进系统就不需要进系统，所以在Vagrant也可以进行目录映射的操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.vm.synced_folder <span class=\"string\">&quot;wwwroot/&quot;</span>, <span class=\"string\">&quot;/var/www&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>前面的参数 “<code>wwwroot/</code>”  表示的是本地的路径，这里使用对于工作目录的相对路径，这里也可以使用绝对路径，比如： “<code>E:/www/</code>”</p>\n<p>后面的参数 “<code>/var/www</code>” 表示虚拟机中对应映射的目录。</p>\n<h2 id=\"Vagrant-打包分发\"><a href=\"#Vagrant-打包分发\" class=\"headerlink\" title=\"Vagrant 打包分发\"></a>Vagrant 打包分发</h2><p>当你配置好开发环境后，退出并关闭虚拟机。在终端里对开发环境进行打包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant package</span><br></pre></td></tr></table></figure>\n\n<p>打包完成后会在当前目录生成一个 <code>package.box</code> 的文件，将这个文件传给其他用户，其他用户只要添加这个 box 并用其初始化自己的开发目录就能得到一个一模一样的开发环境了。</p>\n<h2 id=\"Vagrant-常用命令\"><a href=\"#Vagrant-常用命令\" class=\"headerlink\" title=\"Vagrant 常用命令\"></a>Vagrant 常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant init  <span class=\"comment\"># 初始化</span></span><br><span class=\"line\">$ vagrant up  <span class=\"comment\"># 启动虚拟机</span></span><br><span class=\"line\">$ vagrant halt  <span class=\"comment\"># 关闭虚拟机</span></span><br><span class=\"line\">$ vagrant reload  <span class=\"comment\"># 重启虚拟机</span></span><br><span class=\"line\">$ vagrant ssh  <span class=\"comment\"># SSH 至虚拟机</span></span><br><span class=\"line\">$ vagrant status  <span class=\"comment\"># 查看虚拟机运行状态</span></span><br><span class=\"line\">$ vagrant destroy  <span class=\"comment\"># 销毁当前虚拟机</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vagrant-的一些注意事项\"><a href=\"#Vagrant-的一些注意事项\" class=\"headerlink\" title=\"Vagrant 的一些注意事项\"></a>Vagrant 的一些注意事项</h2><p>使用 <code>Apache/Nginx</code> 时会出现诸如图片修改后但页面刷新仍然是旧文件的情况，是由于静态文件缓存造成的。需要对虚拟机里的 <code>Apache/Nginx</code> 配置文件进行修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Apache 配置添加:</span></span><br><span class=\"line\">EnableSendfile off</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Nginx 配置添加:</span></span><br><span class=\"line\">sendfile off;</span><br></pre></td></tr></table></figure>\n","more":"<p>Windows下玩Linux少不了虚拟机，但装系统依旧是相当费事。在现在什么都在自动化的今天，Vagrant就是这么一个神器，基于Ruby开发，使用开源 VirtualBox 作为虚拟化支持，可以轻松的跨平台部署。</p>\n<p>今天试着把几台机器的环境都换成Vagrant，很爽很顺畅，于是就试着整理了一下使用小结：</p>\n<h2 id=\"Vagrant-是什么？\"><a href=\"#Vagrant-是什么？\" class=\"headerlink\" title=\"Vagrant 是什么？\"></a>Vagrant 是什么？</h2><p>Vagrant 是一款用来构建虚拟开发环境的工具，非常适合 php&#x2F;python&#x2F;ruby&#x2F;java 这类语言开发 web 应用，“代码在我机子上运行没有问题”这种说辞将成为历史。</p>\n<p>我们可以通过 Vagrant 封装一个 Linux 的开发环境，分发给团队成员。成员可以在自己喜欢的桌面系统（Mac&#x2F;Windows&#x2F;Linux）上开发程序，代码却能统一在封装好的环境里运行，非常霸气。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>下载安装 VirtualBox ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudmlydHVhbGJveC5vcmcv\">https://www.virtualbox.org/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>下载安装 Vagrant ：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy52YWdyYW50dXAuY29tLw==\">http://www.vagrantup.com/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>下载需要使用的 box ：</p>\n<p>官方提供的范例：<span class=\"exturl\" data-url=\"aHR0cDovL2ZpbGVzLnZhZ3JhbnR1cC5jb20vcHJlY2lzZTMyLmJveA==\">http://files.vagrantup.com/precise32.box<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>还可以在 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy52YWdyYW50Ym94LmVzLw==\">http://www.vagrantbox.es/<i class=\"fa fa-external-link-alt\"></i></span> 这里下载更多不同系统甚至是已经配置好环境直接可以用的box，虽然可以直接在Vagrant直接使用网址，由Vagrant自动下载安装，但是考虑到网络情况，还是建议自行先下载好。</p>\n<p>由于习惯用CentOS，于是我就下了CentOS 6.3 x86_64 minimal，这个Box根据个人情况进行选择即可。</p>\n<h2 id=\"环境设置\"><a href=\"#环境设置\" class=\"headerlink\" title=\"环境设置\"></a>环境设置</h2><h3 id=\"添加镜像到-Vagrant\"><a href=\"#添加镜像到-Vagrant\" class=\"headerlink\" title=\"添加镜像到 Vagrant\"></a>添加镜像到 Vagrant</h3><p>假设我们下载的镜像存放路径是 <code>E:/box/precise64.box</code>，在终端里输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant box add base CentOS-6.3-x86_64-minimal.box</span><br></pre></td></tr></table></figure>\n\n<p><code>base</code> 是我们给这个 box 命的名字，<code>E:/box/precise64.box</code> 是 box 所在路径</p>\n<h3 id=\"初始化开发环境\"><a href=\"#初始化开发环境\" class=\"headerlink\" title=\"初始化开发环境\"></a>初始化开发环境</h3><p>创建一个开发目录（比如：<code>E:/dev</code>），你也可以使用已有的目录，切换到开发目录里，用 <code>base</code> 镜像初始化当前目录的环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> E:/dev  <span class=\"comment\"># 切换目录</span></span><br><span class=\"line\">$ vagrant init base  <span class=\"comment\"># 初始化</span></span><br><span class=\"line\">$ vagrant up  <span class=\"comment\"># 启动环境</span></span><br></pre></td></tr></table></figure>\n\n<p>你会看到终端显示了启动过程，启动完成后，我们就可以用 SSH 登录虚拟机了，剩下的步骤就是在虚拟机里配置你要运行的各种环境和参数了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant ssh  <span class=\"comment\"># SSH 登录</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /vagrant  <span class=\"comment\"># 切换到开发目录，也就是宿主机上的 `E:/dev`</span></span><br></pre></td></tr></table></figure>\n\n<p><code>E:/dev</code> 目录对应虚拟机中的目录是 <code>/vagrant</code></p>\n<p><strong>Windows 用户注意：</strong>Windows 终端并不支持 ssh，所以需要安装第三方 SSH 客户端，比如：Putty、Cygwin 等。</p>\n<h2 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a>其他设置</h2><p>Vagrant 初始化成功后，会在初始化的目录里生成一个 <code>Vagrantfile</code> 的配置文件，可以修改配置文件进行个性化的定制。</p>\n<p>Vagrant 默认是使用端口映射方式将虚拟机的端口映射本地从而实现类似 <code>http://localhost:80</code> 这种访问方式，这种方式比较麻烦，新开和修改端口的时候都得编辑。相比较而言，host-only 模式显得方便多了。打开 <code>Vagrantfile</code>，将下面这行的注释去掉（移除 <code>#</code>）并保存：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.vm.network :private_network, ip: <span class=\"string\">&quot;192.168.33.10&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重启虚拟机，这样我们就能用 <code>192.168.33.10</code> 访问这台机器了，你可以把 IP 改成其他地址，只要不产生冲突就行。</p>\n<h3 id=\"Vagrant-网络配置的三种模式\"><a href=\"#Vagrant-网络配置的三种模式\" class=\"headerlink\" title=\"Vagrant 网络配置的三种模式\"></a>Vagrant 网络配置的三种模式</h3><p>1、较为常用是端口映射，就是将虚拟机中的端口映射到宿主机对应的端口直接使用 ，在<code>Vagrantfile</code>中配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.vm.network :forwarded_port, guest: 80, host: 8080</span><br></pre></td></tr></table></figure>\n\n<p><code>guest: 80</code> 表示虚拟机中的80端口， <code>host: 8080</code> 表示映射到宿主机的8080端口。</p>\n<p>2、如果需要自己自由的访问虚拟机，但是别人不需要访问虚拟机，可以使用private_network，并为虚拟机设置IP ，在<code>Vagrantfile</code>中配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.vm.network :private_network, ip: <span class=\"string\">&quot;192.168.1.104&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>192.168.1.104</code> 表示虚拟机的IP，多台虚拟机的话需要互相访问的话，设置在相同网段即可</p>\n<p>3、如果需要将虚拟机作为当前局域网中的一台计算机，由局域网进行<code>DHCP</code>，那么在<code>Vagrantfile</code>中配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.vm.network :public_network</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Vagrant-目录映射\"><a href=\"#Vagrant-目录映射\" class=\"headerlink\" title=\"Vagrant 目录映射\"></a>Vagrant 目录映射</h3><p>既然是开发环境，那么开发工作肯定还是需要在本地完成，而不是都要进到虚拟机中去完成，虚拟机就好好在后台运行服务就好了，不然就本末倒置了，所以这里就需要使用目录映射功能，将本地的目录映射到虚拟机的对应目录。</p>\n<p>默认情况下，当前的工作目录，会被映射到虚拟机的 <code>/vagrant</code> 目录，当前目录下的文件可以直接在 <code>/vagrant</code> 下进行访问，当然也可以在通过 <code>ln</code> 创建软连接，如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -fs /vagrant/wwwroot /var/www</span><br></pre></td></tr></table></figure>\n\n<p>来进行目录映射，当然，从自动化配置的角度，能不进系统就不需要进系统，所以在Vagrant也可以进行目录映射的操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.vm.synced_folder <span class=\"string\">&quot;wwwroot/&quot;</span>, <span class=\"string\">&quot;/var/www&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>前面的参数 “<code>wwwroot/</code>”  表示的是本地的路径，这里使用对于工作目录的相对路径，这里也可以使用绝对路径，比如： “<code>E:/www/</code>”</p>\n<p>后面的参数 “<code>/var/www</code>” 表示虚拟机中对应映射的目录。</p>\n<h2 id=\"Vagrant-打包分发\"><a href=\"#Vagrant-打包分发\" class=\"headerlink\" title=\"Vagrant 打包分发\"></a>Vagrant 打包分发</h2><p>当你配置好开发环境后，退出并关闭虚拟机。在终端里对开发环境进行打包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant package</span><br></pre></td></tr></table></figure>\n\n<p>打包完成后会在当前目录生成一个 <code>package.box</code> 的文件，将这个文件传给其他用户，其他用户只要添加这个 box 并用其初始化自己的开发目录就能得到一个一模一样的开发环境了。</p>\n<h2 id=\"Vagrant-常用命令\"><a href=\"#Vagrant-常用命令\" class=\"headerlink\" title=\"Vagrant 常用命令\"></a>Vagrant 常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant init  <span class=\"comment\"># 初始化</span></span><br><span class=\"line\">$ vagrant up  <span class=\"comment\"># 启动虚拟机</span></span><br><span class=\"line\">$ vagrant halt  <span class=\"comment\"># 关闭虚拟机</span></span><br><span class=\"line\">$ vagrant reload  <span class=\"comment\"># 重启虚拟机</span></span><br><span class=\"line\">$ vagrant ssh  <span class=\"comment\"># SSH 至虚拟机</span></span><br><span class=\"line\">$ vagrant status  <span class=\"comment\"># 查看虚拟机运行状态</span></span><br><span class=\"line\">$ vagrant destroy  <span class=\"comment\"># 销毁当前虚拟机</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vagrant-的一些注意事项\"><a href=\"#Vagrant-的一些注意事项\" class=\"headerlink\" title=\"Vagrant 的一些注意事项\"></a>Vagrant 的一些注意事项</h2><p>使用 <code>Apache/Nginx</code> 时会出现诸如图片修改后但页面刷新仍然是旧文件的情况，是由于静态文件缓存造成的。需要对虚拟机里的 <code>Apache/Nginx</code> 配置文件进行修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Apache 配置添加:</span></span><br><span class=\"line\">EnableSendfile off</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Nginx 配置添加:</span></span><br><span class=\"line\">sendfile off;</span><br></pre></td></tr></table></figure>","categories":[{"name":"前端","path":"api/categories/前端.json"}],"tags":[{"name":"开发","path":"api/tags/开发.json"}]}